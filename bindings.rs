/* automatically generated by rust-bindgen 0.59.2 */

extern "C" {
    pub fn mapnik_register_datasources(
        path: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapnik_register_fonts(
        path: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_coord_t {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__mapnik_coord_t() {
    assert_eq!(
        ::std::mem::size_of::<_mapnik_coord_t>(),
        16usize,
        concat!("Size of: ", stringify!(_mapnik_coord_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_mapnik_coord_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_mapnik_coord_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mapnik_coord_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mapnik_coord_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mapnik_coord_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mapnik_coord_t),
            "::",
            stringify!(y)
        )
    );
}
pub type mapnik_coord_t = _mapnik_coord_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_projection_t {
    _unused: [u8; 0],
}
pub type mapnik_projection_t = _mapnik_projection_t;
extern "C" {
    pub fn mapnik_projection_free(p: *mut mapnik_projection_t);
}
extern "C" {
    pub fn mapnik_projection_forward(
        p: *mut mapnik_projection_t,
        c: mapnik_coord_t,
    ) -> mapnik_coord_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_bbox_t {
    _unused: [u8; 0],
}
pub type mapnik_bbox_t = _mapnik_bbox_t;
extern "C" {
    pub fn mapnik_bbox(minx: f64, miny: f64, maxx: f64, maxy: f64) -> *mut mapnik_bbox_t;
}
extern "C" {
    pub fn mapnik_bbox_free(b: *mut mapnik_bbox_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_image_t {
    _unused: [u8; 0],
}
pub type mapnik_image_t = _mapnik_image_t;
extern "C" {
    pub fn mapnik_image_free(i: *mut mapnik_image_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_image_blob_t {
    pub ptr: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__mapnik_image_blob_t() {
    assert_eq!(
        ::std::mem::size_of::<_mapnik_image_blob_t>(),
        16usize,
        concat!("Size of: ", stringify!(_mapnik_image_blob_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_mapnik_image_blob_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_mapnik_image_blob_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mapnik_image_blob_t>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mapnik_image_blob_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mapnik_image_blob_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mapnik_image_blob_t),
            "::",
            stringify!(len)
        )
    );
}
pub type mapnik_image_blob_t = _mapnik_image_blob_t;
extern "C" {
    pub fn mapnik_image_blob_free(b: *mut mapnik_image_blob_t);
}
extern "C" {
    pub fn mapnik_image_to_png_blob(i: *mut mapnik_image_t) -> *mut mapnik_image_blob_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mapnik_map_t {
    _unused: [u8; 0],
}
pub type mapnik_map_t = _mapnik_map_t;
extern "C" {
    pub fn mapnik_map(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut mapnik_map_t;
}
extern "C" {
    pub fn mapnik_map_free(m: *mut mapnik_map_t);
}
extern "C" {
    pub fn mapnik_map_last_error(m: *mut mapnik_map_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mapnik_map_get_srs(m: *mut mapnik_map_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mapnik_map_set_srs(
        m: *mut mapnik_map_t,
        srs: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapnik_map_load(
        m: *mut mapnik_map_t,
        stylesheet: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapnik_map_zoom_all(m: *mut mapnik_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapnik_map_render_to_file(
        m: *mut mapnik_map_t,
        filepath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapnik_map_resize(
        m: *mut mapnik_map_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn mapnik_map_set_buffer_size(m: *mut mapnik_map_t, buffer_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mapnik_map_zoom_to_box(m: *mut mapnik_map_t, b: *mut mapnik_bbox_t);
}
extern "C" {
    pub fn mapnik_map_projection(m: *mut mapnik_map_t) -> *mut mapnik_projection_t;
}
extern "C" {
    pub fn mapnik_map_render_to_image(m: *mut mapnik_map_t) -> *mut mapnik_image_t;
}
